// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SignInType {
  username
}

enum AccountRole {
  admin
  user
}

model Account {
  id BigInt @id

  role       AccountRole
  signInType SignInType

  username       String?   @unique @db.VarChar(20)
  password       String?
  nickname       String    @unique @db.VarChar(20)
  lastEnteredAt  DateTime? @db.Timestamp(3)
  lastSignedInAt DateTime? @db.Timestamp(3)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  gameRooms GameRoom[]
  members   GameRoomMember[]

  @@map("account")
}

model AccountEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("account_event_store")
}

enum GameRoomStatus {
  waiting
  ready
  inProgress
  finished
  paused
}

enum GameRoomVisibility {
  public
  private
  hidden
}

model GameRoom {
  id BigInt @id

  accountId BigInt

  status              GameRoomStatus
  visibility          GameRoomVisibility
  title               String
  maxMembersCount     Int                @default(0)
  currentMembersCount Int                @default(0)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  members GameRoomMember[]

  @@map("game_room")
}

model GameRoomEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("game_room_event_store")
}

enum GameRoomMemberRole {
  host
  player
}

model GameRoomMember {
  id BigInt @id

  accountId  BigInt
  gameRoomId BigInt

  role     GameRoomMemberRole
  nickname String             @db.VarChar(20)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  account  Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  gameRoom GameRoom @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)

  @@unique([accountId, gameRoomId])
  @@unique([gameRoomId, nickname])
  @@map("game_room_member")
}

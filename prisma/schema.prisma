// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NicknameSource {
  id BigInt @id

  name     String
  sequence Int

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  @@map("nickname_source")
}

model NicknameSourceEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("nickname_source_event_store")
}

enum SignInType {
  username
  google
}

enum SocialProvider {
  google
}

enum AccountRole {
  admin
  user
}

model Account {
  id BigInt @id

  role              AccountRole
  signInType        SignInType
  socialProvider    SocialProvider?
  socialProviderUid String?

  username       String?   @unique @db.VarChar(20)
  password       String?
  nickname       String    @unique @db.VarChar(20)
  lastEnteredAt  DateTime? @db.Timestamp(3)
  lastLeftAt     DateTime? @db.Timestamp(3)
  isActive       Boolean
  lastSignedInAt DateTime? @db.Timestamp(3)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  gameRooms GameRoom[]

  @@index([socialProvider, socialProviderUid])
  @@map("account")
}

model AccountEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("account_event_store")
}

enum GameRoomStatus {
  waiting
  starting
  inProgress
  finished
  paused
}

enum GameRoomVisibility {
  public
  private
  hidden
}

model GameRoom {
  id BigInt @id

  accountId BigInt

  status             GameRoomStatus
  visibility         GameRoomVisibility
  title              String
  maxMembersCount    Int                @default(0)
  quizTimeLimitInSec Int
  quizzesCount       Int
  /// [GameRoomMember]
  members            Json[]             @default([])

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("game_room")
}

model GameRoomEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("game_room_event_store")
}

model Quiz {
  id BigInt @id

  type     String
  answer   String
  imageUrl String?
  question String?

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  @@map("quiz")
}

model QuizEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("quiz_event_store")
}

model QuizImage {
  id BigInt @id

  originalFileName String
  fileName         String
  category         String
  extension        String
  contentLength    String
  width            Int
  height           Int

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  @@index(fileName)
  @@map("quiz_image")
}

model QuizImageEventStore {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
  @@map("quiz_image_event_store")
}
